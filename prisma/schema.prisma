datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  admin
  client
  guest
}

/// User model represents the users of the application.
model User {
  id            String          @id @default(cuid())
  name          String?         
  email         String?         @unique
  emailVerified DateTime?
  password      String         @db.VarChar(120)
  isVerified   Boolean                  @default(false)
  image         String?
  account       Account?
  role          Role            @default(guest)
  notes         Note[]
  employee      Employee?
  notifications Notification[]
  resetPasswordRequests ResetPasswordRequest[]
  userVerificationRequests UserVerificationRequest[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  @@index([email])
}

/// VerificationToken model represents the tokens used for verifying user actions.
model ResetPasswordRequest {
  id        String    @id @default(uuid()) @db.VarChar(36)
  token     Int    @unique
  expires   DateTime
  userId    String    @unique @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User     @relation(fields: [userId], references: [id])
}

model UserVerificationRequest {
  id        String    @id @default(uuid()) @db.VarChar(36)
  token     String    @unique
  expires   DateTime
  userId    String    @unique @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User     @relation(fields: [userId], references: [id])
}


/// Account model represents the accounts of the users.
 enum Plan {
  free
  premium
}

model Account {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  activePlan  Plan     @default(free)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Employee model represents the employees managed by the users.
model Employee {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  firstName   String?
  lastName    String?
  phone       String?
  daySalary   Float?
  monthSalary Float?
  hireDate    DateTime
  jobTitle    String
  timesheets  Timesheet[]
  projects    Project[] @relation("ProjectManager")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  manager   Project[]
  @@index([firstName])
}

/// GeneralExpense model represents general expenses.
model GeneralExpense {
  id          String   @id @default(cuid())
  name        String
  amount      Decimal  @db.Decimal(10,2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Project model represents the projects managed by employees.
model Project {
  id         String   @id @default(cuid())
  name       String   
  startDate  DateTime
  endDate    DateTime
  budget     Decimal  @db.Decimal(10,2)
  manager    Employee @relation(fields: [managerId], references: [id])
  managerId  String
  timesheets Timesheet[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt  
  employees  Employee[] @relation("ProjectManager")
}

/// Timesheet model represents the timesheets filled by employees for projects.
model Timesheet {
  id          String   @id @default(cuid())
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  String
  project     Project  @relation(fields: [projectId], references: [id])  
  projectId   String
  workDate    DateTime
  hours       Decimal  @db.Decimal(4,2)
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Note model represents the notes created by users.
model Note {
  id        String   @id @default(cuid())
  title     String
  content   String   
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Notification model represents the notifications sent to users.
model Notification {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  message   String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
}




